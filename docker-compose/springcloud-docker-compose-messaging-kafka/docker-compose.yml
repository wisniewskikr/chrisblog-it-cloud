version: '3'

services:

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - helloworld-network

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
    - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE      
    networks:
      - helloworld-network
  
  service-discovery:
    image: service-discovery-image
    container_name: service-discovery-container
    build:
      context: ./service-discovery
      dockerfile: Dockerfile-Fast
    environment:
      - spring.application.name=service-discovery
      - server.port=8761
      - eureka.client.fetch-registry=false
      - eureka.client.register-with-eureka=false
    ports:
      - 8761:8761
    healthcheck:
      test: "exit 0"
    depends_on:
      - kafka
    networks:
      - helloworld-network

  service-helloworld-publisher:
    image: service-helloworld-publisher-image
    container_name: service-helloworld-publisher-container
    build:
      context: ./service-helloworld-publisher
      dockerfile: Dockerfile-Fast
    environment:
      - spring.application.name=service-helloworld-publisher
      - server.port=9090
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka
      - management.endpoints.jmx.exposure.include=health,info,env,beans
      - management.endpoints.web.exposure.include=health,info,env,beans
      - service.helloworld.message=Hello World
      - spring.kafka.producer.bootstrap-servers=kafka:9093
      - spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
      - spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
      - topic.name=helloworld
    ports:
      - 9090:9090
    healthcheck:
      test: "exit 0"
    depends_on:
      service-discovery:
        condition: service_healthy
    networks:
      - helloworld-network

  service-helloworld-subscriber:
    image: service-helloworld-subscriber-image
    container_name: service-helloworld-subscriber-container
    build:
      context: ./service-helloworld-subscriber
      dockerfile: Dockerfile-Fast
    environment:
      - spring.application.name=service-helloworld-subscriber
      - server.port=8080
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka
      - management.endpoints.jmx.exposure.include=health,info,env,beans
      - management.endpoints.web.exposure.include=health,info,env,beans
      - spring.kafka.consumer.bootstrap-servers=kafka:9093
      - spring.kafka.consumer.group-id=mygroupid
      - spring.kafka.consumer.auto-offset-reset=latest
      - spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
      - spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
      - topic.name=helloworld
      - default.message=There is no message in topic
    ports:
      - 8080:8080
    healthcheck:
      test: "exit 0"
    depends_on:
      service-discovery:
        condition: service_healthy
    networks:
      - helloworld-network

  service-gateway:
    image: service-gateway-image
    container_name: service-gateway-container
    build:
      context: ./service-gateway
      dockerfile: Dockerfile-Fast
    environment:
      - spring.application.name=service-gateway
      - server.port=8762
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka
      - management.endpoint.gateway.enabled=true
      - management.endpoints.web.exposure.include=gateway
      - spring.cloud.gateway.routes[0].id=service-helloworld-publisher
      - spring.cloud.gateway.routes[0].uri=lb://service-helloworld-publisher
      - spring.cloud.gateway.routes[0].predicates[0]=Path=/publish/**
      - spring.cloud.gateway.routes[1].id=service-helloworld-subscriber
      - spring.cloud.gateway.routes[1].uri=lb://service-helloworld-subscriber
      - spring.cloud.gateway.routes[1].predicates[0]=Path=/subscribe/**
    ports:
      - 8762:8762
    healthcheck:
      test: "exit 0"
    depends_on:
      service-discovery:
        condition: service_healthy
    networks:
      - helloworld-network  

networks:
  helloworld-network:
    name: helloworld-network