# Name
spring.application.name=first

# Port
server.port=8081

# API
api.url=http://localhost:8082
api.timeout.ms=5000

# Actuator Properties
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilience4j Properties
# Register in Actuator
resilience4j.circuitbreaker.instances.fallback-second.registerHealthIndicator=true
# Base on count of requests
resilience4j.circuitbreaker.instances.fallback-second.slidingWindowType=COUNT_BASED
# Check last 6 requests in CLOSED state
resilience4j.circuitbreaker.instances.fallback-second.event-consumer-buffer-size=6
# Change state from CLOSED to OPEN if 3 from 6 requests fails
resilience4j.circuitbreaker.instances.fallback-second.slidingWindowSize=3
# Change state from CLOSED to OPEN if 3 requests fails in row
resilience4j.circuitbreaker.instances.fallback-second.minimum-number-of-calls=3
# Change state from CLOSED to OPEN if 50% requests fails
resilience4j.circuitbreaker.instances.fallback-second.failureRateThreshold=50
# Change state from OPEN to HALF_OPEN after 10 seconds
resilience4j.circuitbreaker.instances.fallback-second.waitDurationInOpenState=10s
# Change state from HALF_OPEN to CLOSED if 2 of 3 requests fails
resilience4j.circuitbreaker.instances.fallback-second.permittedNumberOfCallsInHalfOpenState=3
# Change state from OPEN to HALF_OPEN automatically
resilience4j.circuitbreaker.instances.fallback-second.automaticTransitionFromOpenToHalfOpenEnabled=true
# These exceptions never change state to OPEN
resilience4j.circuitbreaker.instances.fallback-second.ignore-exceptions=org.springframework.web.client.HttpClientErrorException