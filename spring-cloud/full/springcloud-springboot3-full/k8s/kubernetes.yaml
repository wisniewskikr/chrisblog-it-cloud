# LOKI

apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
        - name: loki
          image: grafana/loki:3.3.2
          ports:
            - containerPort: 3100
          args: ["-config.file=/etc/loki/local-config.yaml"]

---

apiVersion: v1
kind: Service
metadata:
  name: loki
spec:
  selector:
    app: loki
  ports:
    - protocol: TCP
      port: 3100
      targetPort: 3100

---

# PROMETHEUS

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.46.0
          ports:
            - containerPort: 9090
          args:
            - --enable-feature=exemplar-storage
            - --config.file=/etc/prometheus/prometheus.yml
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-configmap
---

apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-configmap
data:
  prometheus.yml: |
    global:
      scrape_interval: 2s
      evaluation_interval: 2s

    scrape_configs:      
      - job_name: 'fe'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['fe.default.svc.cluster.local:8080'] ## only for demo purposes don't use host.docker.internal in production
            labels:
              application: 'FE'
      - job_name: 'be'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['be.default.svc.cluster.local:8081'] ## only for demo purposes don't use host.docker.internal in production
            labels:
              application: 'BE'

---

# TEMPO

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tempo
  template:
    metadata:
      labels:
        app: tempo
    spec:
      containers:
        - name: tempo
          image: grafana/tempo:2.2.2
          args: ["-config.file=/etc/tempo.yaml"]
          volumeMounts:
            - name: tempo-config
              mountPath: /etc/tempo.yaml
              subPath: tempo.yaml
            - name: tempo-data
              mountPath: /tmp/tempo
          ports:
            - containerPort: 3200
              name: tempo
            - containerPort: 9411
              name: zipkin
      volumes:
        - name: tempo-config
          configMap:
            name: tempo-config
        - name: tempo-data
          persistentVolumeClaim:
            claimName: tempo-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: tempo
spec:
  selector:
    app: tempo
  ports:
    - protocol: TCP
      port: 3200
      targetPort: 3200
      name: tempo
    - protocol: TCP
      port: 9411
      targetPort: 9411
      name: zipkin

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-config
data:
  tempo.yaml: |
    server:
      http_listen_port: 3200
    
    distributor:
      receivers:
        zipkin:
    
    storage:
      trace:
        backend: local
        local:
          path: /tmp/tempo/blocks

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: tempo-pv
spec:
  storageClassName: 'standard'
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: /tmp/tempo

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tempo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

# GRAFANA

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.1.0
          ports:
            - containerPort: 3000
          env:
            - name: GF_AUTH_ANONYMOUS_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: GF_AUTH_ANONYMOUS_ENABLED
                  name: grafana-configmap
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              valueFrom:
                configMapKeyRef:
                  key: GF_AUTH_ANONYMOUS_ORG_ROLE
                  name: grafana-configmap
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              valueFrom:
                configMapKeyRef:
                  key: GF_AUTH_DISABLE_LOGIN_FORM
                  name: grafana-configmap
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana/provisioning/datasources
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-configmap

---

apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30001

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-configmap
data:
    GF_AUTH_ANONYMOUS_ENABLED: "true"
    GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    GF_AUTH_DISABLE_LOGIN_FORM: "true"
    datasource.yml: |
      apiVersion: 1

      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus.default.svc.cluster.local:9090
          editable: false
          jsonData:
            httpMethod: POST
            exemplarTraceIdDestinations:
              - name: trace_id
                datasourceUid: tempo
        - name: Tempo
          type: tempo
          access: proxy
          orgId: 1
          url: http://tempo.default.svc.cluster.local:3200
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
          apiVersion: 1
          uid: tempo
          jsonData:
            httpMethod: GET
            tracesToLogs:
              datasourceUid: 'loki'
            nodeGraph:
              enabled: true
        - name: Loki
          type: loki
          uid: loki
          access: proxy
          orgId: 1
          url: http://loki.default.svc.cluster.local:3100
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
          apiVersion: 1
          jsonData:
            derivedFields:
              -   datasourceUid: tempo
                  matcherRegex: \[.+,(.+?),
                  name: TraceID
                  url: $${__value.raw}

---

# DATABASE CONFIGURATION

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_DATABASE
              value: database
            - name: MYSQL_USER
              value: admin
            - name: MYSQL_PASSWORD
              value: admin123
            - name: MYSQL_ROOT_PASSWORD
              value: my_secret_password
          ports:
            - containerPort: 3306
          livenessProbe:
            exec:
              command:
              - mysqladmin
              - ping
              - -h
              - "127.0.0.1"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - mysqladmin
              - ping
              - -h
              - "127.0.0.1"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - port: 3306  
  clusterIP: None

---

# BE CONFIGURATION

apiVersion: apps/v1
kind: Deployment
metadata:
  name: be
  labels:
    app: be
spec:
  replicas: 1
  selector:
    matchLabels:
      app: be
  template:
    metadata:
      labels:
        app: be
    spec:
      containers:
      - name: be
        image: wisniewskikr/springcloud-springboot3-full_be:0.0.1
        ports:
        - containerPort: 8081
        env:
        - name: spring.datasource.url
          value: jdbc:mysql://mysql:3306/database
        - name: management.zipkin.tracing.endpoint
          value: http://tempo:9411/api/v2/spans
        - name: LOKI_URL
          value: http://loki:3100
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: be-service
spec:
  selector:
    app: be
  ports:
    - port: 8081
      targetPort: 8081

---

# FE CONFIGURATION

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fe
  labels:
    app: fe
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fe
  template:
    metadata:
      labels:
        app: fe
    spec:
      containers:
      - name: fe
        image: wisniewskikr/springcloud-springboot3-full_fe:0.0.1
        ports:
        - containerPort: 8080
        env:
        - name: api.url
          value: http://be-service:8081
        - name: management.zipkin.tracing.endpoint
          value: http://tempo:9411/api/v2/spans
        - name: LOKI_URL
          value: http://loki:3100
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: fe-service
spec:
  type: NodePort
  selector:
    app: fe
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30000