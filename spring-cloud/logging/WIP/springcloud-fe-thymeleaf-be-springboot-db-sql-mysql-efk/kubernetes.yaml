# ELASTICSEARCH CONFIGURATION

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: elasticsearch
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: elasticsearch
    spec:
      containers:
      - image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
        name: elasticsearch
        resources: {}
        env:
          - name: discovery.type
            value: single-node
status: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: elasticsearch
  name: elasticsearch
spec:
  ports:
  - name: 9200-9200
    port: 9200
    protocol: TCP
    targetPort: 9200
  selector:
    app: elasticsearch
  type: ClusterIP
status:
  loadBalancer: {}

---

# KIBANA CONFIGURATION

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: kibana
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kibana
    spec:
      containers:
      - image: docker.elastic.co/kibana/kibana:8.3.3
        name: kibana
        resources: {}
status: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: kibana
  name: kibana-show
spec:
  ports:
  - name: 5601-5601
    port: 5601
    protocol: TCP
    targetPort: 5601
  selector:
    app: kibana
  type: NodePort
status:
  loadBalancer: {}

---

# LOGSTASH CONFIG

apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-pipeline
  namespace: default
data:
  logstash.conf: |
    input {
      tcp{
        port => 5000
        codec => json
      }
    }
  
    output {  
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "helloworld-%{app}"
      }
    }

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: default
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    xpack.monitoring.elasticsearch.hosts: [ "elasticsearch:9200" ]

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.3.3
        ports:
        - containerPort: 5000
          protocol: TCP
        - containerPort: 5044
          protocol: TCP
        - containerPort: 9600
          protocol: TCP
        volumeMounts:
        - name: logstash-pipeline-volume
          mountPath: /usr/share/logstash/pipeline/logstash.conf
          subPath: logstash.conf
        - name: logstash-config-volume
          mountPath: /usr/share/logstash/config/logstash.yml
          subPath: logstash.yml
      volumes:
      - name: logstash-pipeline-volume
        configMap:
          name: logstash-pipeline
      - name: logstash-config-volume
        configMap:
          name: logstash-config

---

apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: default
spec:
  selector:
    app: logstash
  ports:
    - name: tcp5000
      protocol: TCP
      port: 5000
      targetPort: 5000
    - name: beats5044
      protocol: TCP
      port: 5044
      targetPort: 5044
    - name: monitoring9600
      protocol: TCP
      port: 9600
      targetPort: 9600

---

# DATABASE CONFIGURATION

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_DATABASE
              value: database
            - name: MYSQL_USER
              value: admin
            - name: MYSQL_PASSWORD
              value: admin123
            - name: MYSQL_ROOT_PASSWORD
              value: my_secret_password
          ports:
            - containerPort: 3306
          livenessProbe:
            exec:
              command:
              - mysqladmin
              - ping
              - -h
              - "127.0.0.1"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - mysqladmin
              - ping
              - -h
              - "127.0.0.1"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - port: 3306  
  clusterIP: None

---

# BE CONFIGURATION

apiVersion: apps/v1
kind: Deployment
metadata:
  name: be
  labels:
    app: be
spec:
  replicas: 1
  selector:
    matchLabels:
      app: be
  template:
    metadata:
      labels:
        app: be
    spec:
      containers:
      - name: be
        image: wisniewskikr/springcloud-fe-thymeleaf-be-springboot-db-sql-mysql-efk_be:0.0.1
        ports:
        - containerPort: 8081
        env:
        - name: spring.datasource.url
          value: jdbc:mysql://mysql:3306/database
        - name: logstash.server
          value: logstash 
        - name: logstash.port
          value: "5000"
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: be-service
spec:
  selector:
    app: be
  ports:
    - port: 8081
      targetPort: 8081

---

# FE CONFIGURATION

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fe
  labels:
    app: fe
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fe
  template:
    metadata:
      labels:
        app: fe
    spec:
      containers:
      - name: fe
        image: wisniewskikr/springcloud-fe-thymeleaf-be-springboot-db-sql-mysql-efk_fe:0.0.1
        ports:
        - containerPort: 8080
        env:
        - name: api.url
          value: http://be-service:8081
        - name: logstash.server
          value: logstash 
        - name: logstash.port
          value: "5000"
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: fe-service
spec:
  type: NodePort
  selector:
    app: fe
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30000